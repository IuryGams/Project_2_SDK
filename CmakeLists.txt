    cmake_minimum_required(VERSION 3.21)

    set(CMAKE_BUILD_TYPE "Release")

    # Configurando o Cmake para utilizar as configurações do vcpkg
    set(CMAKE_TOOLCHAIN_FILE "C:/Dev/vcpkg/scripts/buildsystems/vcpkg.cmake")

    # Setando o local das bibliotecas instaladas
    set(CMAKE_PREFIX_PATH "C:/Dev/vcpkg/installed/x64-windows")

    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    
    PROJECT(
        PROJECT_INTEGRATION
        
        LANGUAGES CXX
    )
    
    find_package(gRPC CONFIG REQUIRED)

    add_subdirectory(proto)
    add_subdirectory(tests)
    # add_subdirectory(client)
    # add_subdirectory(server)

    file(GLOB FILES_CPP source/*.cpp)
    file(GLOB SERVICES_FILES_CPP ./source/services/*.cpp)
    file(GLOB METER_FILES_CPP ./source/meters/*.cpp)

    add_library(
        ${PROJECT_NAME}_lib

        ${FILES_CPP}
        ${SERVICES_FILES_CPP}
        ${METER_FILES_CPP}
        ./server/server.cpp
        ./client/src/client.cpp
        ./client/src/client_method.cpp
    )

    add_executable(
        ${PROJECT_NAME}

        ./main.cpp
    )

    target_include_directories(
        ${PROJECT_NAME}_lib

        PUBLIC
            ./include
            ./server
            ./include/services
            ./include/meters
            ./client/include
            ${CMAKE_CURRENT_BINARY_DIR}/proto
    )

    target_compile_features(
        ${PROJECT_NAME}_lib

        PUBLIC
            cxx_std_20
    )

    target_link_libraries(
        ${PROJECT_NAME}_lib

        PUBLIC
            protolib
    )

    target_link_libraries(
        ${PROJECT_NAME}

        PUBLIC
            ${PROJECT_NAME}_lib
    )


    # --------------------------------------------------------------------------------------------------#
    # LIST OF COMANDS  

    # ----- COMAND FOR GENERATE COVERAGE -----

    # Defina o caminho para os arquivos fonte e o executável de teste
    set(SOURCES_DIR "C:\\Dev\\Projects C++\\PROJECT_INTEGRATION\\source\\utils.cpp")
    set(TEST_EXECUTABLE_PATH "${CMAKE_BINARY_DIR}\\tests\\PROJECT_INTEGRATIONTests.exe")
    set(COVERAGE_OUTPUT_DIR "${CMAKE_SOURCE_DIR}\\coverage")

    file(MAKE_DIRECTORY ${COVERAGE_OUTPUT_DIR})

    # Comando personalizado para executar OpenCppCoverage
    add_custom_target(coverage
    COMMAND OpenCppCoverage 
            --sources "C:\\Dev\\Projects C++\\PROJECT_INTEGRATION\\source"
            --export_type "html:${COVERAGE_OUTPUT_DIR}"
            -- ${TEST_EXECUTABLE_PATH}
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    )

    # Adicione dependências, garantindo que o executável de teste seja construído antes de rodar a cobertura
    add_dependencies(coverage ${PROJECT_NAME}Tests)