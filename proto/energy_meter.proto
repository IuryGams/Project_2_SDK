syntax = "proto3";

// Serviço EnergyMeter
service EnergyMeter
{  
    rpc GetAllLines(Empty) returns (AllLinesReply);
    rpc GetAllMeters(Empty) returns (MeterListReply);
    
    rpc GetModelsByLine(RequestMeterLine) returns (MeterListReply);

    rpc CreateMeter(MeterCompleteInfor) returns (CreateMeterReply);
    rpc ReadMeter(MeterID) returns (ReadMeterReply);
    rpc DeleteMeter(MeterID) returns (ResponseStatus);
}

// Mensagem vazia para requisições que não necessitam de parâmetros
message Empty {}

// ##### ENUMERAÇÕES #####

// Status de resposta para exceções
enum ReplyStatusException
{
    UNKNOWN_ERROR = 0;
    THIS_METER_ALREADY_EXIST = 1;
    NOT_FOUND = 2;
    NOT_POSSIBLE_CREATE_METER = 3;
    ALREADY_EXISTS_METER = 4;
    NOT_EXISTS_LINE = 5;
}

// Linhas possíveis para os medidores
enum Lines
{
    UNKNOWN = 0;
    ARES = 1;
    APOLO = 2;
    CRONOS = 3;
    ZEUS = 4;
}

// ##### MENSAGENS #####

// Requisição para obter modelos por linha
message RequestMeterLine
{
    string meter_line = 1;
}

// Identificação de um medidor
message MeterID
{
    int32 id = 1;
}

// Informação completa de um medidor
message MeterCompleteInfor
{
    int32 id = 1;
    Lines line = 2;
    string model = 3;
}

// Resposta contendo o status da operação
message ResponseStatus
{
    enum ReplyStatus
    {
        COMMAND_EXECUTION_SUCCESSFUL = 0;
        COMMAND_EXECUTION_FAILED = 1;
    }

    ReplyStatus status = 1;
}

// Resposta para a leitura de um medidor
message ReadMeterReply
{
    oneof resp 
    {
        MeterCompleteInfor meter = 1;
        ReplyStatusException error = 2;
    }
}

// Resposta para a criação de um medidor
message CreateMeterReply
{
    oneof resp
    {
        MeterCompleteInfor meter = 1;
        ReplyStatusException error = 2;
    }
}

// Resposta contendo a lista de medidores
message MeterListReply
{
    repeated MeterCompleteInfor meters = 1;
    optional ReplyStatusException error = 2;
    
}

// Resposta contendo todas as linhas
message AllLinesReply
{
    repeated Lines lines = 1;
    optional ReplyStatusException error = 2;
}
